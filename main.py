from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from datetime import datetime, timedelta, time
import logging
import locale
import pytz
from secure import secrets

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞—Ç—ã
locale.setlocale(locale.LC_TIME, 'C') # –õ–æ–∫–∞–ª–∏
timezone = pytz.timezone('Europe/Moscow')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
event_participants = {}
event_ids = {}
event_id_counter = 1
subscribed_users = set()  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –±–æ—Ç–æ–º
MAX_PARTICIPANTS = 18  # –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
TOKEN = secrets.get('BOT_API_TOKEN')
send_time = time(17, 0, tzinfo=timezone)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
def create_event_on_date(target_date):
    global event_id_counter
    event_name = f"\n\n–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ –≤–æ–ª–µ–π–±–æ–ª—É \n{target_date.strftime('%A %d %B')} –≤ 20:00"
    event_id = event_id_counter
    event_participants[event_id] = []
    event_ids[event_id] = event_name

    logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_name} —Å ID: {event_id}")

    event_id_counter += 1
    return event_id, event_name

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤
# async def remove_past_events(context: ContextTypes.DEFAULT_TYPE):
#     current_date = datetime.now().date()
#     events_to_remove = []
#
#     for event_id, event_name in event_ids.items():
#         # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –∏–∑ –∏–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è
#         event_date_str = event_name.split()[3:5]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –∏–∑ –∏–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è
#         event_date = datetime.strptime(" ".join(event_date_str), '%d %B').date()
#
#         if event_date < current_date:  # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∞
#             events_to_remove.append(event_id)
#
#     for event_id in events_to_remove:
#         logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_ids[event_id]} —Å ID: {event_id}")
#         del event_participants[event_id]  # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è
#         del event_ids[event_id]  # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–±—ã—Ç–∏–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –¥–Ω—è
def get_next_training_day():
    today = datetime.now().date()
    weekday = today.weekday()

    if weekday < 3:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—Å—Ä–µ–¥–∞: –±–ª–∏–∂–∞–π—à–∏–π —á–µ—Ç–≤–µ—Ä–≥
        delta_days = 3 - weekday  # –ß–µ—Ç–≤–µ—Ä–≥ - –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ 3
    elif weekday < 6:  # –ß–µ—Ç–≤–µ—Ä–≥-—Å—É–±–±–æ—Ç–∞: –±–ª–∏–∂–∞–π—à–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        delta_days = 6 - weekday  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ 6
    else:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥
        delta_days = 4

    next_training_date = today + timedelta(days=delta_days)
    return next_training_date

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_invitation_to_all(context: ContextTypes.DEFAULT_TYPE, event_id, event_name):
    for chat_id in subscribed_users:
        try:
            await context.bot.send_message(chat_id = chat_id, text = f"–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:\n{event_name}!")
            logger.info(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {event_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_static_keyboard(event_id, chat_id):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    participants = event_participants.get(event_id, [])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if any(p['user_id'] == chat_id for p in participants):
        dynamic_button_text = "–ü–µ—Ä–µ–¥—É–º–∞–ª! –û—Ç–ø–∏—Å—ã–≤–∞—é—Å—å("  # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∞–Ω, –∏–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    else:
        dynamic_button_text = "–ò–¥—É –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–Ω–æ–ø–∫–æ–π
    keyboard = [
        [dynamic_button_text],
        ["–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.message.from_user
    event_id = next(iter(event_participants))  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à—É –ª–æ–≥–∏–∫—É)
    pending_data = context.user_data.get('pending_leave_confirmation')

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    if pending_data and pending_data['user_id'] == user.id:
        await handle_leave_confirmation(update, context)
        return

    if text == "–ò–¥—É –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!":
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        await join_event(update, context, event_id, user)
    elif text == "–ü–µ—Ä–µ–¥—É–º–∞–ª! –û—Ç–ø–∏—Å—ã–≤–∞—é—Å—å(":
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        await leave_event(update, context, event_id, user)
    elif text == "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_list = await notify_participants(event_id)
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{participants_list}")
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –æ—Ç–≤–µ—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—É–ø–µ–Ω–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –†–∞—Å–ø–∞—Ä—Å–∏–º callback_data, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å event_id –∏ user_id
    data = query.data.split('_')
    action = data[0]
    event_id = int(data[2])
    user_id = int(data[3])

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–µ—Ç"
    if action == "cancel":
        participants_list = await notify_participants(event_id)
        await query.edit_message_text(f"–í—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏!ü•≥\n\n–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{participants_list}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î–∞", –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏
    elif action == "confirm":
        await query.edit_message_text(
            "–ï—Å–ª–∏ –≤—ã —Ç–æ—á–Ω–æ –ø–æ–∫–∏–¥–∞–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ,üòÆ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–æ–º '–¥–∞'."
            "\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ '–Ω–µ—Ç'.üôè")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å –µ–≥–æ –æ—Ç–≤–µ—Ç –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏
        context.user_data['pending_leave_confirmation'] = {
            'event_id': event_id,
            'user_id': user_id
        }

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏
async def handle_leave_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user = update.message.from_user
    pending_data = context.user_data.get('pending_leave_confirmation')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø–∏—Å–∫—É —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if pending_data and pending_data['user_id'] == user.id:
        event_id = pending_data['event_id']
        if text == '–¥–∞':
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
            participants = event_participants[event_id]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —é–∑–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            user_participant = next((p for p in participants if p['user_id'] == user.id), None)
            updated_participants = [p for p in participants if p['user_id'] != user.id]
            event_participants[event_id] = updated_participants

            await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏üò™\n–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π!")

            # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            await update.message.reply_text("–û–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=create_static_keyboard(event_id, user.id))

            # –†–∞–±–æ—Ç–∞–µ–º —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            if user_participant and user_participant['status'] != 'reserve':
                for participant in participants:
                    if participant['status'] == 'reserve':
                        participant['status'] = 'confirmed'

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
                        try:
                            await context.bot.send_message(
                                chat_id=participant['user_id'],
                                text="üéâ–£—Ä–∞–∞–∞!üéâ\nü§©–í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤, —É–≤–∏–¥–∏–º—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {participant['username']}: {e}")

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        for other_participant in participants:
                            if other_participant['user_id'] != participant['user_id']:
                                try:
                                    await context.bot.send_message(
                                        chat_id=other_participant['user_id'],
                                        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {participant['username']} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤."
                                    )
                                    await update.message.reply_text(
                                        f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{await notify_participants(event_id)}")
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º: {e}")

                        # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                        break

                # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                await notify_all_users_about_update(context, event_id, user.id, user.first_name, "–æ—Ç–ø–∏—Å–∞–ª—Å—è")
                await update.message.reply_text("–û–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=create_static_keyboard(event_id, user.id))

        elif text == '–Ω–µ—Ç':
            await update.message.reply_text("–û—Ç–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\nüéâ–£—Ä–∞–∞–∞! –í—ã –æ—Å—Ç–∞—ë—Ç–µ—Å—å —Å –Ω–∞–º–∏!üôè")

        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
        del context.user_data['pending_leave_confirmation']

    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
async def notify_all_users_about_update(context: ContextTypes.DEFAULT_TYPE, event_id, userId, first_name, action):
    participants = await notify_participants(event_id)
    message_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {action}.\n\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{participants}"

    for chat_id in subscribed_users:
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ
        if chat_id == userId:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        try:
            await context.bot.send_message(chat_id=chat_id, text=message_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
async def join_event(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id, user):
    participants = event_participants[event_id]

    if user.id in [p['user_id'] for p in participants]:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã.")
        return

    if len(participants) < MAX_PARTICIPANTS:
        participants.append({'user_id': user.id, 'username': user.first_name, 'status': 'confirmed'})
        await update.message.reply_text(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {len(participants)}.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤!ü§ù")
    else:
        participants.append({'user_id': user.id, 'username': user.first_name, 'status': 'reserve'})
        await update.message.reply_text("–ú–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤.‚òï")

    await update.message.reply_text(
        f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"
        f"\n\n–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{await notify_participants(event_id)}")

    # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    await notify_all_users_about_update(context, event_id, user.id, user.first_name, "–∑–∞–ø–∏—Å–∞–ª—Å—è")
    await update.message.reply_text("–û–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup = create_static_keyboard(event_id, user.id))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
async def leave_event(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id, user):
    participants = event_participants[event_id]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
    if user.id not in [p['user_id'] for p in participants]:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data=f"confirm_leave_{event_id}_{user.id}"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data=f"cancel_leave_{event_id}_{user.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–≤–µ—Ä–µ–Ω –ª–∏ –æ–Ω
    await update.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω–µ –ø–æ–π–¥—ë—Ç–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?", reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ —Å–æ–±—ã—Ç–∏–∏
async def notify_participants(event_id):
    participants = event_participants[event_id]
    if not participants:
        return "–ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è! –ë—É–¥—å –ø–µ—Ä–≤—ã–º!"
    messages = []

    for idx, participant in enumerate(participants):
        status = "–†–µ–∑–µ—Ä–≤" if participant['status'] == 'reserve' else "–û—Å–Ω–æ–≤–Ω–æ–π"
        messages.append(f"{idx + 1}. {participant['username']} - {status}")

    return "\n".join(messages)

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è Start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    event_id = next(iter(event_participants))
    subscribed_users.add(chat_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")
    reply_markup = create_static_keyboard(event_id, chat_id)

    # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º
    for event_id, event_name in event_ids.items():
        await update.message.reply_text(f"–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_name}", reply_markup=reply_markup)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
async def schedule_events(context: ContextTypes.DEFAULT_TYPE):
    next_training_day = get_next_training_day()
    event_id, event_name = create_event_on_date(next_training_day)
    await send_invitation_to_all(context, event_id, event_name)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å
async def create_initial_event(context: ContextTypes.DEFAULT_TYPE):
    next_training_day = get_next_training_day()
    event_id, event_name = create_event_on_date(next_training_day)
    await send_invitation_to_all(context, event_id, event_name)


if __name__ == "__main__":
    application = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^(–¥–∞|–Ω–µ—Ç)$'), handle_leave_confirmation))
    # application.job_queue.run_daily(remove_past_events, time(hour=0, minute=1))

    # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å
    application.job_queue.run_once(create_initial_event, 0)

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º –≤ 17:00
    application.job_queue.run_daily(schedule_events, send_time, days=(2, 4))

    application.run_polling()
