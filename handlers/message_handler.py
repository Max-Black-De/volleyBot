from telegram import Update
from telegram.ext import ContextTypes

from utils.events_utils import event_participants
from utils.keyboard_utils import create_static_keyboard
from utils.notification_utils import notify_participants, notify_all_users_about_update
import logging


logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏
async def handle_leave_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user = update.message.from_user
    pending_data = context.user_data.get('pending_leave_confirmation')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø–∏—Å–∫—É —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if pending_data and pending_data['user_id'] == user.id:
        event_id = pending_data['event_id']
        if text == '–¥–∞':
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
            participants = event_participants[event_id]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —é–∑–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            user_participant = next((p for p in participants if p['user_id'] == user.id), None)
            updated_participants = [p for p in participants if p['user_id'] != user.id]
            event_participants[event_id] = updated_participants

            await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏üò™\n–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π!")

            # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            await update.message.reply_text("–û–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=create_static_keyboard(event_id, user.id))

            # –†–∞–±–æ—Ç–∞–µ–º —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            if user_participant and user_participant['status'] != 'reserve':
                for participant in participants:
                    if participant['status'] == 'reserve':
                        participant['status'] = 'confirmed'

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
                        try:
                            await context.bot.send_message(
                                chat_id=participant['user_id'],
                                text="üéâ–£—Ä–∞–∞–∞!üéâ\nü§©–í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤, —É–≤–∏–¥–∏–º—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {participant['username']}: {e}")

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        for other_participant in participants:
                            if other_participant['user_id'] != participant['user_id']:
                                try:
                                    await context.bot.send_message(
                                        chat_id=other_participant['user_id'],
                                        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {participant['username']} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤."
                                    )
                                    await update.message.reply_text(
                                        f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{await notify_participants(event_id)}")
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º: {e}")

                        # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                        break

                # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                await notify_all_users_about_update(context, event_id, user.id, user.first_name, "–æ—Ç–ø–∏—Å–∞–ª—Å—è")
                await update.message.reply_text("–û–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=create_static_keyboard(event_id, user.id))

        elif text == '–Ω–µ—Ç':
            await update.message.reply_text("–û—Ç–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\nüéâ–£—Ä–∞–∞–∞! –í—ã –æ—Å—Ç–∞—ë—Ç–µ—Å—å —Å –Ω–∞–º–∏!üôè")

        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
        del context.user_data['pending_leave_confirmation']

    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")